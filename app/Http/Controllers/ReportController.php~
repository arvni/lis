<?php

namespace App\Http\Controllers;

use App\Domains\Reception\Models\Report;
use App\Domains\Reception\Services\AcceptanceItemService;
use App\Domains\Reception\Services\ReportService;
use App\Domains\Setting\Repositories\SettingRepository;
use App\Http\Requests\StoreReportRequest;
use App\Http\Requests\UpdateReportRequest;
use App\Http\Resources\ReportResource;
use Carbon\Carbon;
use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Gate;
use Inertia\Inertia;
use Inertia\Response;

class ReportController extends Controller
{
    public function __construct(
        private readonly ReportService $reportService,
        private readonly AcceptanceItemService $acceptanceItemService,
        private readonly SettingRepository $settingRepository
    )
    {
        $this->middleware("indexProvider")->only("index");
    }

    /**
     * Display a listing of the resource.
     */
    public function index(Request $request)
    {
        $requestInputs = $request->all();
        $reports = $this->reportService->listReports($requestInputs);
        return Inertia::render('Report/Index', compact("reports", "requestInputs"));
    }


    /**
     * Store a newly created resource in storage.
     */
    public function store(StoreReportRequest $request)
    {
        $user = auth()->user();

        $report = $this->reportService->createReport(
            $user,
            $request->get('acceptance_item_id'),
            $request->get('reported_document'),
            $request->get('files', [])
        );

        return redirect()->route('reports.show', $report);
    }

    /**
     * Display the specified resource.
     */
    public function show(Report $report)
    {
//        $this->authorize("view", $report);

        // Load report with all related data
        $loadedReport = $this->reportService->loadReportWithAllRelations($report);

        // Get report history
        $history = $this->acceptanceItemService->getReportHistory($report->acceptance_item_id);

        // Get clinical comment template URL from settings
        $clinicalCommentTemplateUrl = $this->settingRepository->getSettingsByClassAndKey('Report', 'clinicalReport');

        return Inertia::render('Report/Show', [
            "report" => $loadedReport,
            "history" => $history,
            "signers" => $loadedReport->Signers,
            "clinicalCommentTemplateUrl" => $clinicalCommentTemplateUrl,
            "canApprove" => Gate::allows("approve", $report),
            "canEdit" => Gate::allows("update", $report),
            "canPrint" => Gate::allows("print", $report),
            "canPublish" => Gate::allows("publish", $report),
            "canUnpublish" => Gate::allows("unpublish", $report),
        ]);
    }

    /**
     * Show the form for editing the specified resource.
     * @throws AuthorizationException
     */
    public function edit(Report $report): Response|RedirectResponse
    {
        $this->authorize("update", $report);

        // Check if the report is editable
        if (!$this->reportService->isReportEditable($report)) {
            return redirect()->back()->withErrors("The approved/rejected Report Cannot be changed");
        }

        // Load report data
        $reportData = $this->reportService->prepareReportForEditing($report);

        // Get related history
        $history = $this->reportService->getHistoryByAcceptanceItemId($report->acceptance_item_id);

        // Format document files
        $files = $this->reportService->formatDocumentFiles($reportData->documents);
        $reportData->files = $files;

        // Get template URL
        $template = $this->reportService->getTemplateUrl($reportData->acceptanceItem);

        return Inertia::render('Report/Edit', [
            "template" => $template,
            "report" => $reportData,
            "signers" => $reportData->signers,
            "acceptanceItem" => $reportData->acceptanceItem,
            "history" => $history,
            "patients" => $reportData->acceptanceItem->patients,
        ]);
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(UpdateReportRequest $request, Report $report)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Report $report)
    {
        //
    }
}
