<?php

namespace App\Domains\Document\Models;

use App\Domains\Document\Enums\DocumentTag;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Document extends Model
{
    use SoftDeletes;

    protected $primaryKey = 'hash';
    public $incrementing = false;
    protected $keyType = 'string';

    protected $fillable = [
        'hash',
        'ext',
        'related_type',
        'related_id',
        'owner_type',
        'owner_id',
        'tag',
        'originalName',
        'path',
    ];

    protected $casts = [
        'deleted_at' => 'datetime',
        "tag" => DocumentTag::class
    ];

    protected $appends = [
        'file_name',
        'address'
    ];


    public function getFileNameAttribute()
    {
        return $this->attributes['hash'] . '.' . $this->attributes['ext'];
    }

    public function getAddressAttribute()
    {
        $related = "";
        $relatedId = $this->attributes['owner_id'] . '/';
        if ($this->related_id) {
            $type = explode('\\', $this->attributes['related_type'])[2];
            if ($this->attributes['related_type'] == $this->attributes["owner_type"]) {
                $type = "";
                if ($this->attributes['related_id'] == $this->attributes["owner_id"])
                    $relatedId = "";
            }
            $related = $type . '/' . $relatedId;
        }
        return implode('/', explode('\\', $this->attributes['owner_type'])) . '/' .
            $this->attributes['owner_id'] . '/' . $related . $this->attributes['tag'];
    }


    /**
     * Get the related model (polymorphic).
     */
    public function related()
    {
        return $this->morphTo();
    }

    /**
     * Get the owner model (polymorphic).
     */
    public function owner()
    {
        return $this->morphTo();
    }
}
